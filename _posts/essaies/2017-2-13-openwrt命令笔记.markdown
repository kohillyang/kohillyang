---
layout: post
title: openwrt命令笔记
date: 2017-02-13 19:40
comments: true
external-url:
categories: 杂文
---
<br>
<div id="dw__toc" style="width:300px;float:right;margin-left:10px">
    <h3 class="toggle open" style="cursor: pointer;"><strong><span>−</span></strong>Table of Contents</h3>
    <div aria-expanded="true" style="display: block;">
        <div id="toc"></div>
    </div>
</div>

　　本文只是笔记，所述内容仅供参考，大部分未经测试。

### OpenWrt获取源码（已测试）
　　[访问https://dev.openwrt.org/wiki/GetSource](https://dev.openwrt.org/wiki/GetSource)。

### 列出所有监听的端口（已测试）
`netstat -nlp | grep LISTEN` <br>
netstat命令各个参数说明如下：<br>
　　-t : 指明显示TCP端口<br>
　　-u : 指明显示UDP端口<br>
　　-l : 仅显示监听套接字(所谓套接字就是使应用程序能够读写与收发通讯协议(protocol)与资料的程序)<br>
　　-p : 显示进程标识符和程序名称，每一个套接字/端口都属于一个程序。<br>
　　-n : 不进行DNS轮询(可以加速操作)<br>
　　比如，要显示所有的TCP连接，所用命令为：`netstat -ntp`<br>

### 防火墙设置（除另外指明外，均没有测试）
　　openwrt下的防火墙原理是通过uci解码产生iptables规则，所以下面的配置文件都有等效的iptable命令。<br>
　　查看iptables已启用策略:<code>iptables -L</code>

```bash
#DMZ主机
config redirect
        option target 'DNAT'
        option src 'wan'
        option dest 'lan'
        option proto 'tcp udp'
        option src_dport '1-65535'
        option dest_ip '192.168.2.252'
        option dest_port '1-65535'
        option name 'Forward'   
#拦截指定MAC地址
config rule
        option src              'lan'
        option dest             'wan'
        option src_mac          '00:00:00:00:00'
        option target           'REJECT'
#拦截局域网到 123.45.67.89的访问请求
config rule
        option src              'lan'
        option dest             'wan'
        option dest_ip          '123.45.67.89'
        option target           'REJECT'
#重定向：局域网访问10.55.34.85的请求将被重定向到63.240.161.99的123端口,可以用来做网页重定向
config redirect
        option src              'lan'
        option dest             'wan'
        option src_ip           '10.55.34.85'
        option src_dip          '63.240.161.99'
        option dest_port        '123'
        option target           'SNAT'
#端口映射：来自internet的使用tcp协议访问路由80端口的请求映射到内网192.168.1.10的 80端口,可以映射端口提高P2P效率
config redirect
        option src 'wan'
        option src_dport '80'
        option proto 'tcp'
        option dest_ip '192.168.1.10'                
## 允许来自wan的发往51413的连接        
config rule
        option name 'transmission'
        option src 'wan'
        option proto 'tcp udp'
        option dest_port '51413'
        option family 'ipv6'
        option target 'ACCEPT'
        option dest 'lan'
## 允许来自wan的发往51413的连接
config rule 'transmission_peer_tcp'
        option src 'wan'
        option dest_port '51413'
        option proto 'tcp udp'
        option target 'ACCEPT'
        option name 'transmission_web_ipv4'

```

### 允许IPV6&IPV4某个端口的访问请求(测试成功)

运行在路由器上的程序已经监听了某个端口但是外网依旧无法访问时，可以尝试下面的命令：

`iptables -I INPUT -p tcp --dport PORT_NUMBER -j ACCEPT`
同样对于IPV6，命令如下
`ip6tables -I INPUT -p tcp --dport PORT_NUMBER -j ACCEPT`

### Example：利用iptables记录日志(未成功)

```
iptables -A INPUT -i wan+ -p tcp --dport 51413 -j LOG --log-prefix "iptables_51413_tcp_alert" --log-level debug
iptables -A INPUT -i wan+ -p udp --dport 51413 -j LOG --log-prefix "iptables_51413_udp_alert" --log-level debug
ip6tables -A INPUT -i wan+ -p tcp --dport 51413 -j LOG --log-prefix "ip6tables_51413_tcp_alert" --log-level debug
ip6tables -A INPUT -i wan+ -p udp --dport 51413 -j LOG --log-prefix "ip6tables_51413_udp_alert" --log-level debug
```

### 重启防火墙(测试成功)
`/etc/init.d/firewall restart`

### 利用curl获取IP(测试成功)

```
#get IPv4 address
echo `curl -4 -s icanhazip.com`
#get IPV6 address
echo `curl -6 -s icanhazip.com`
```

### 利用iptables实现port forwarding(测试成功)
开启端口转发功能，编辑/etc/sysctl.conf，使net.ipv4.ip_forward=1，随后`sysctl -p`。

```bash
wan_addr=`curl -4 -s icanhazip.com`
dest_port_wan=6800
dest_port_lan=6800
dest_addr_lan=192.168.1.1

#add forwarding rule
iptables -t nat -A PREROUTING  -p tcp -m tcp -d $wan_addr --dport     $dest_port_wan -j DNAT --to-destination $dest_addr_lan:$dest_port_lan
iptables -A FORWARD -m state -p tcp -d $dest_addr_lan --dport     $dest_port_lan --state NEW,ESTABLISHED,RELATED -j ACCEPT
iptables -t nat -A POSTROUTING -p tcp -m tcp -s $dest_addr_lan --sport $dest_port_lan -j SNAT --to-source $wan_addr

#remove forwarding rule
iptables -t nat -D PREROUTING  -p tcp -m tcp -d $wan_addr --dport     $dest_port_wan -j DNAT --to-destination $dest_addr_lan:$dest_port_lan
iptables -D FORWARD -m state -p tcp -d $dest_addr_lan --dport     $dest_port_lan --state NEW,ESTABLISHED,RELATED -j ACCEPT
iptables -t nat -D POSTROUTING -p tcp -m tcp -s $dest_addr_lan --sport     $dest_port_lan -j SNAT --to-source $wan_addr
```

### 关于iptable的一个性能问题(blocking packets it shouldn't be)
[Why is UFW/iptables blocking packets it shouldn't be?](http://www.linuxquestions.org/questions/linux-networking-3/why-is-ufw-iptables-blocking-packets-it-shouldn%27t-be-4175500239/)

### 删除LUCI缓存（已测试）
rm /tmp/luci-indexcache

### 安装支持IPv6的http代理(已测试)

```bash
opkg update
opkg install tinyproxy luci-app-tinyproxy
uci set tinyproxy.@tinyproxy[0].enabled=1
uci commit
/etc/init.d/tinyproxy enable
/etc/init.d/tinyproxy restart
rm /tmp/luci-indexcache
```
参考配置文件：

```bash
config tinyproxy
        option Port '8888'
        option Timeout '600'
        option DefaultErrorFile '/usr/share/tinyproxy/default.html'
        option StatFile '/usr/share/tinyproxy/stats.html'
        option MaxClients '100'
        option MinSpareServers '5'
        option MaxSpareServers '20'
        option StartServers '10'
        option MaxRequestsPerChild '0'
        option ViaProxyName 'tinyproxy'
        option enabled '1'
        option User 'root'
        option Listen '0.0.0.0'
        option Syslog '1'
        option Group 'nogroup'
        list Allow '::ffff:0:0/96'
        list ConnectPort '0'
        list ConnectPort 443
        list ConnectPort 563
```

### 利用ip6tables 设置NAT6(已测试)

```bash
LAN_ULA_PREFIX=$(uci get network.globals.ula_prefix)
WAN6_INTERFACE='pppoe-wan'
WAN6_GATEWAY=$(route -A inet6 -e | grep "pppoe-wan" | awk '/::\/0/{print $2; exit}')
ip6tables -t nat -I POSTROUTING -s "$LAN_ULA_PREFIX" -o "$WAN6_INTERFACE" -j MASQUERADE
route -A inet6 add 2000::/3 gw "$WAN6_GATEWAY" dev "$WAN6_INTERFACE"
```

### 同时支持IPV4与IPV6端口扫描的网站(已测试)
<http://www.ipv6scanner.com>
